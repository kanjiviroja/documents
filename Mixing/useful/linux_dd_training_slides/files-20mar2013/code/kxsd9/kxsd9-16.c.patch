--- kxsd9-15.c	2013-03-21 05:55:52.126131239 -0500
+++ kxsd9-16.c	2013-03-22 03:38:15.490106093 -0500
@@ -44,6 +44,7 @@
 #include <linux/mutex.h>
 #include <linux/pm.h>
 #include <linux/pm_runtime.h>
+#include <linux/regulator/consumer.h>
 
 enum {
 	KXSD9_REG_XOUT_H	= 0x0,
@@ -73,8 +74,11 @@
 };
 
 struct kxsd9 {
+	struct device *dev;
 	struct i2c_client *i2c;
 	struct mutex mutex;
+	struct regulator *iovdd;
+	struct regulator *vdd;
 };
 
 /* TODO: is "int" vs. "s32" always ok here et. al? */
@@ -146,6 +150,49 @@
 	return __kxs_reg_write_RESET_WRITE(kxs, KXSD9_REG_RESET_WRITE_KEY);
 }
 
+static int __kxs_regulator_get_and_set(struct kxsd9 *kxs)
+{
+	/* TODO: check return values! */
+	/* TODO: what if we get one, but not the other? */
+	kxs->vdd = regulator_get(kxs->dev, "VDD");
+	if (IS_ERR(kxs->vdd))
+		kxs->vdd = NULL;
+	kxs->iovdd = regulator_get(kxs->dev, "IOVDD");
+	if (IS_ERR(kxs->iovdd))
+		kxs->iovdd = NULL;
+	/* TODO: regulator_set_voltage() */
+	return 0;
+}
+
+static int __kxs_regulator_enable(struct kxsd9 *kxs)
+{
+	/* TODO: check return values! */
+	if (kxs->vdd)
+		regulator_enable(kxs->vdd);
+	if (kxs->iovdd)
+		regulator_enable(kxs->iovdd);
+	return 0;
+}
+
+static int __kxs_regulator_disable(struct kxsd9 *kxs)
+{
+	/* TODO: check return values! */
+	if (kxs->iovdd)
+		regulator_disable(kxs->iovdd);
+	if (kxs->vdd)
+		regulator_disable(kxs->vdd);
+	return 0;
+}
+
+static void __kxs_regulator_put(struct kxsd9 *kxs)
+{
+	if (kxs->iovdd)
+		regulator_put(kxs->iovdd);
+	if (kxs->vdd)
+		regulator_put(kxs->vdd);
+}
+
+
 static int kxs_runtime_suspend(struct device *dev)
 {
 	struct kxsd9 *kxs = dev_get_drvdata(dev);
@@ -155,9 +203,14 @@
 	ret = mutex_lock_interruptible(&kxs->mutex);
 	if (ret)
 		return ret;
-	mutex_unlock(&kxs->mutex);
 
-	return 0;
+	ret = __kxs_regulator_disable(kxs);
+	if (ret)
+		goto done;
+
+done:
+	mutex_unlock(&kxs->mutex);
+	return ret;
 }
 
 static int kxs_runtime_resume(struct device *dev)
@@ -169,9 +223,14 @@
 	ret = mutex_lock_interruptible(&kxs->mutex);
 	if (ret)
 		return ret;
-	mutex_unlock(&kxs->mutex);
 
-	return 0;
+	ret = __kxs_regulator_enable(kxs);
+	if (ret)
+		goto done;
+
+done:
+	mutex_unlock(&kxs->mutex);
+	return ret;
 }
 
 static struct attribute *kxs_sysattr[] = {
@@ -200,9 +259,11 @@
 		return -ENOMEM;
 
 	i2c_set_clientdata(dev, kxs);
+	kxs->dev = &dev->dev;
 	kxs->i2c = dev;
 
 	mutex_init(&kxs->mutex);
+	__kxs_regulator_get_and_set(kxs);
 
 	pm_runtime_set_suspended(&dev->dev);
 	pm_runtime_set_autosuspend_delay(&dev->dev, 5000);
@@ -238,6 +299,7 @@
 
 	pm_runtime_disable(&dev->dev);
 	sysfs_remove_group(&dev->dev.kobj, &kxs_sysattrg);
+	__kxs_regulator_put(kxs);
 	i2c_set_clientdata(kxs->i2c, NULL);
 	kfree(kxs);
 	return 0;
